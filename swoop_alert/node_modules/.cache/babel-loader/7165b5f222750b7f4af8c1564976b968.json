{"ast":null,"code":"import _slicedToArray from \"/home/apollo/Workspace/swoop_alert/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/apollo/Workspace/swoop_alert/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        markers = _useState2[0],\n        setMarker = _useState2[1]; //Send question to user to ask if we can use their location for a starting location\n\n\n  function displayLocationInfo(position) {\n    const lng = position.coords.longitude;\n    const lat = position.coords.latitude; //const startLocation = { lng: lng, lat: lat };\n\n    console.log(\"longitude: \".concat(lng, \" | latitude: \").concat(lat));\n    return {\n      lng,\n      lat\n    };\n  }\n\n  const handleClickedMap = e => {\n    let latitude = e.latLng.lat();\n    let longtitude = e.latLng.lng();\n    const marker = {\n      latitude: latitude,\n      longtitude: longtitude\n    };\n    setMarker([...markers, marker]);\n  }; // Check if we can get the geolocation\n\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Home, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(Map, {\n      handleClickedMap: handleClickedMap,\n      isMarkerShown: true,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"70vh\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }),\n      startLocation: navigator.geolocation.getCurrentPosition(displayLocationInfo),\n      markers: markers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n  } else {}\n}\n\nexport default App; //defaultCenter = {{ lat: -34.397, lng: 150.644 }}\n//{ { lat: -34.397, lng: 150.644 } }","map":{"version":3,"sources":["/home/apollo/Workspace/swoop_alert/src/App.js"],"names":["React","useState","Home","Map","App","markers","setMarker","displayLocationInfo","position","lng","coords","longitude","lat","latitude","console","log","handleClickedMap","e","latLng","longtitude","marker","navigator","geolocation","getCurrentPosition","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACgBH,QAAQ,CAAC,EAAD,CADxB;AAAA;AAAA,QACNI,OADM;AAAA,QACGC,SADH,kBAGb;;;AACA,WAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACrC,UAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,SAA5B;AACA,UAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,QAA5B,CAFqC,CAGrC;;AAEAC,IAAAA,OAAO,CAACC,GAAR,sBAA0BN,GAA1B,0BAA6CG,GAA7C;AACA,WAAO;AAAEH,MAAAA,GAAF;AAAOG,MAAAA;AAAP,KAAP;AACD;;AAED,QAAMI,gBAAgB,GAAGC,CAAC,IAAI;AAC5B,QAAIJ,QAAQ,GAAGI,CAAC,CAACC,MAAF,CAASN,GAAT,EAAf;AACA,QAAIO,UAAU,GAAGF,CAAC,CAACC,MAAF,CAAST,GAAT,EAAjB;AAEA,UAAMW,MAAM,GAAG;AAAEP,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBM,MAAAA,UAAU,EAAEA;AAAlC,KAAf;AACAb,IAAAA,SAAS,CAAC,CAAC,GAAGD,OAAJ,EAAae,MAAb,CAAD,CAAT;AACD,GAND,CAba,CAqBb;;;AACA,MAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyChB,mBAAzC;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,GAAD;AACE,MAAA,gBAAgB,EAAES,gBADpB;AAEE,MAAA,aAAa,MAFf;AAGE,MAAA,YAAY,EAAC,mFAHf;AAIE,MAAA,cAAc,EAAE;AAAK,QAAA,KAAK,EAAE;AAAEQ,UAAAA,MAAM;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJlB;AAKE,MAAA,gBAAgB,EAAE;AAAK,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALpB;AAME,MAAA,UAAU,EAAE;AAAK,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANd;AAOE,MAAA,aAAa,EAAEH,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACbhB,mBADa,CAPjB;AAUE,MAAA,OAAO,EAAEF,OAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAiBD,GAnBD,MAmBO,CACN;AAEF;;AAED,eAAeD,GAAf,C,CAEA;AAEA","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  const [markers, setMarker] = useState([]);\n\n  //Send question to user to ask if we can use their location for a starting location\n  function displayLocationInfo(position) {\n    const lng = position.coords.longitude;\n    const lat = position.coords.latitude;\n    //const startLocation = { lng: lng, lat: lat };\n\n    console.log(`longitude: ${lng} | latitude: ${lat}`);\n    return { lng, lat };\n  }\n\n  const handleClickedMap = e => {\n    let latitude = e.latLng.lat();\n    let longtitude = e.latLng.lng();\n\n    const marker = { latitude: latitude, longtitude: longtitude };\n    setMarker([...markers, marker]);\n  };\n\n  // Check if we can get the geolocation\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    return (\n      <div className=\"App\">\n        <Home />\n        <Map\n          handleClickedMap={handleClickedMap}\n          isMarkerShown\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `70vh` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n          startLocation={navigator.geolocation.getCurrentPosition(\n            displayLocationInfo\n          )}\n          markers={markers}\n        />\n      </div>\n    );\n  } else {\n  }\n\n}\n\nexport default App;\n\n//defaultCenter = {{ lat: -34.397, lng: 150.644 }}\n\n//{ { lat: -34.397, lng: 150.644 } }\n"]},"metadata":{},"sourceType":"module"}