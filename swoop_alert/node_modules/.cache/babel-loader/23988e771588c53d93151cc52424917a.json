{"ast":null,"code":"import _slicedToArray from \"/home/apollo/Workspace/swoop_alert/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/apollo/Workspace/swoop_alert/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        markers = _useState2[0],\n        setMarker = _useState2[1];\n\n  const _useState3 = useState({\n    lat: -34.397,\n    lng: 150.644\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        startLoc = _useState4[0],\n        setStartLoc = _useState4[1]; // Check if we can get the geolocation\n\n\n  if (navigator.geolocation) {\n    // 🗺️ yep, we can proceed!\n    console.log(\"YES\");\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n  } else {\n    console.log(\"No\");\n  } //Send question to user to ask if we can use their location for a starting location\n\n\n  function displayLocationInfo(position) {\n    const lng = position.coords.longitude;\n    const lat = position.coords.latitude;\n    console.log(\"longitude: \".concat(lng, \" | latitude: \").concat(lat));\n    setStartLoc({\n      startLoc: {\n        lat: lat,\n        lng: lng\n      }\n    });\n    console.log(startLoc);\n  }\n\n  const handleClickedMap = e => {\n    let latitude = e.latLng.lat();\n    let longtitude = e.latLng.lng();\n    const marker = {\n      latitude: latitude,\n      longtitude: longtitude\n    };\n    setMarker([...markers, marker]);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Map, {\n    handleClickedMap: handleClickedMap,\n    isMarkerShown: true,\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: React.createElement(\"div\", {\n      style: {\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }),\n    containerElement: React.createElement(\"div\", {\n      style: {\n        height: \"70vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }),\n    mapElement: React.createElement(\"div\", {\n      style: {\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }),\n    startLocation: startLoc,\n    markers: markers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), startLoc.lat, startLoc.lng);\n}\n\nexport default App; //defaultCenter = {{ lat: -34.397, lng: 150.644 }}","map":{"version":3,"sources":["/home/apollo/Workspace/swoop_alert/src/App.js"],"names":["React","useState","Home","Map","App","markers","setMarker","lat","lng","startLoc","setStartLoc","navigator","geolocation","console","log","getCurrentPosition","displayLocationInfo","position","coords","longitude","latitude","handleClickedMap","e","latLng","longtitude","marker","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACgBH,QAAQ,CAAC,EAAD,CADxB;AAAA;AAAA,QACNI,OADM;AAAA,QACGC,SADH;;AAAA,qBAEmBL,QAAQ,CAAC;AAAEM,IAAAA,GAAG,EAAE,CAAC,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAD,CAF3B;AAAA;AAAA,QAENC,QAFM;AAAA,QAEIC,WAFJ,kBAIb;;;AACA,MAAIC,SAAS,CAACC,WAAd,EAA2B;AACzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAH,IAAAA,SAAS,CAACC,WAAV,CAAsBG,kBAAtB,CAAyCC,mBAAzC;AACD,GAJD,MAIO;AACLH,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,GAXY,CAab;;;AACA,WAASE,mBAAT,CAA6BC,QAA7B,EAAuC;AACrC,UAAMT,GAAG,GAAGS,QAAQ,CAACC,MAAT,CAAgBC,SAA5B;AACA,UAAMZ,GAAG,GAAGU,QAAQ,CAACC,MAAT,CAAgBE,QAA5B;AAEAP,IAAAA,OAAO,CAACC,GAAR,sBAA0BN,GAA1B,0BAA6CD,GAA7C;AACAG,IAAAA,WAAW,CAAC;AAAED,MAAAA,QAAQ,EAAE;AAAEF,QAAAA,GAAG,EAAEA,GAAP;AAAYC,QAAAA,GAAG,EAAEA;AAAjB;AAAZ,KAAD,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD;;AAED,QAAMY,gBAAgB,GAAGC,CAAC,IAAI;AAC5B,QAAIF,QAAQ,GAAGE,CAAC,CAACC,MAAF,CAAShB,GAAT,EAAf;AACA,QAAIiB,UAAU,GAAGF,CAAC,CAACC,MAAF,CAASf,GAAT,EAAjB;AAEA,UAAMiB,MAAM,GAAG;AAAEL,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBI,MAAAA,UAAU,EAAEA;AAAlC,KAAf;AACAlB,IAAAA,SAAS,CAAC,CAAC,GAAGD,OAAJ,EAAaoB,MAAb,CAAD,CAAT;AACD,GAND;;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,GAAD;AACE,IAAA,gBAAgB,EAAEJ,gBADpB;AAEE,IAAA,aAAa,MAFf;AAGE,IAAA,YAAY,EAAC,mFAHf;AAIE,IAAA,cAAc,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEK,QAAAA,MAAM;AAAR,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJlB;AAKE,IAAA,gBAAgB,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM;AAAR,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALpB;AAME,IAAA,UAAU,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM;AAAR,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANd;AAOE,IAAA,aAAa,EAAEjB,QAPjB;AAQE,IAAA,OAAO,EAAEJ,OARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAYGI,QAAQ,CAACF,GAZZ,EAaGE,QAAQ,CAACD,GAbZ,CADF;AAiBD;;AAED,eAAeJ,GAAf,C,CAEA","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  const [markers, setMarker] = useState([]);\n  const [startLoc, setStartLoc] = useState({ lat: -34.397, lng: 150.644 });\n\n  // Check if we can get the geolocation\n  if (navigator.geolocation) {\n    // 🗺️ yep, we can proceed!\n    console.log(\"YES\");\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n  } else {\n    console.log(\"No\");\n  }\n\n  //Send question to user to ask if we can use their location for a starting location\n  function displayLocationInfo(position) {\n    const lng = position.coords.longitude;\n    const lat = position.coords.latitude;\n\n    console.log(`longitude: ${lng} | latitude: ${lat}`);\n    setStartLoc({ startLoc: { lat: lat, lng: lng } });\n    console.log(startLoc);\n  }\n\n  const handleClickedMap = e => {\n    let latitude = e.latLng.lat();\n    let longtitude = e.latLng.lng();\n\n    const marker = { latitude: latitude, longtitude: longtitude };\n    setMarker([...markers, marker]);\n  };\n\n  return (\n    <div className=\"App\">\n      <Home />\n      <Map\n        handleClickedMap={handleClickedMap}\n        isMarkerShown\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `70vh` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n        startLocation={startLoc}\n        markers={markers}\n      />\n      {startLoc.lat}\n      {startLoc.lng}\n    </div>\n  );\n}\n\nexport default App;\n\n//defaultCenter = {{ lat: -34.397, lng: 150.644 }}\n"]},"metadata":{},"sourceType":"module"}